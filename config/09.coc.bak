" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " => Coc config General 
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " vim-prettier
" "let g:prettier#quickfix_enabled = 0
" "let g:prettier#quickfix_auto_focus = 0
" " prettier command for coc
" command! -nargs=0 Prettier :CocCommand prettier.formatFile
"
" " coc config
" let g:coc_global_extensions = [
"   \ 'coc-css',
"   \ 'coc-emmet',
"   \ 'coc-eslint', 
"   \ 'coc-html',
"   \ 'coc-imselect',
"   \ 'coc-json', 
"   \ 'coc-marketplace',
"   \ 'coc-pairs',
"   \ 'coc-phpls',
"   \ 'coc-prettier',
"   \ 'coc-python',
"   \ 'coc-snippets',
"   \ 'coc-tsserver',
"   \ 'coc-vetur',
"   \ 'coc-vimlsp',
"   \ 'coc-yank',
"   \ ]
"
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " => Coc config Remaps 
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" " Coc diagnostic 
" nmap <silent> cn <Plug>(coc-diagnostic-next)
" nmap <silent> cp <Plug>(coc-diagnostic-prev)
"
"
" " Remap keys for gotos
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
"
" " Use tab for trigger completion with characters ahead and navigate.
" " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
"
" " Use K to show documentation in preview window
"
" " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
" " xmap <Leader>a  <Plug>(coc-codeaction-selected)
" " nmap <Leader>a  <Plug>(coc-codeaction-selected)
"
" " Remap for do codeAction of current line
" " nmap <Leader>ac  <Plug>(coc-codeaction)
" " Fix autofix problem of current line
" " nmap <Leader>qf  <Plug>(coc-fix-current)
"
" " Create mappings for function text object, requires document symbols feature of languageserver.
" " xmap if <Plug>(coc-funcobj-i)
" " xmap af <Plug>(coc-funcobj-a)
" " omap if <Plug>(coc-funcobj-i)
" " omap af <Plug>(coc-funcobj-a)
"
" " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
" " nmap <silent> <C-d> <Plug>(coc-range-select)
" " xmap <silent> <C-d> <Plug>(coc-range-select)
"
" " Use `:Format` to format current buffer
" command! -nargs=0 Format :call CocAction('format')
"
" " Use `:Fold` to fold current buffer
" command! -nargs=? Fold :call     CocAction('fold', <f-args>)
"
" " use `:OR` for organize import of current buffer
" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
"
" " Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"
" " Using CocList
" " Show all diagnostics
" " nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" " " Manage extensions
" " nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" " " Show commands
" " nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" " " Find symbol of current document
" " nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" " " Search workspace symbols
" " " nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" " " Do default action for next item.
" " nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" " " Do default action for previous item.
" " nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" " " Resume latest coc list
" " nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
